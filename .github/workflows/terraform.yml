name: "Terraform - Infra"

on:
  push:
    paths:
      - '**.tf'
    branches:
      - main
  pull_request:
    paths:
      - '**.tf'

jobs:
  setup-infra:
    name: "Configurar infra da aplicação"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      TF_VAR_db_order_product_version: ${{ secrets.TF_VAR_DB_ORDER_PRODUCT_VERSION }}
      TF_VAR_db_order_product_instance_name: ${{ secrets.TF_VAR_DB_ORDER_PRODUCT_INSTANCE_NAME }}
      TF_VAR_db_order_product_instance_class: ${{ secrets.TF_VAR_DB_ORDER_PRODUCT_INSTANCE_CLASS }}
      TF_VAR_db_order_product_allocated_storage: ${{ secrets.TF_VAR_DB_ORDER_PRODUCT_ALLOCATED_STORAGE }}
      TF_VAR_db_order_product_username: ${{ secrets.TF_VAR_DB_ORDER_PRODUCT_USERNAME }}
      TF_VAR_db_order_product_password: ${{ secrets.TF_VAR_DB_ORDER_PRODUCT_PASSWORD }}
      TF_VAR_db_payments_version: ${{ secrets.TF_VAR_DB_PAYMENTS_VERSION }}
      TF_VAR_db_payments_instance_name: ${{ secrets.TF_VAR_DB_PAYMENTS_INSTANCE_NAME }}
      TF_VAR_db_payments_instance_class: ${{ secrets.TF_VAR_DB_PAYMENTS_INSTANCE_CLASS }}
      TF_VAR_db_payments_allocated_storage: ${{ secrets.TF_VAR_DB_PAYMENTS_ALLOCATED_STORAGE }}
      TF_VAR_db_payments_username: ${{ secrets.TF_VAR_DB_PAYMENTS_USERNAME }}
      TF_VAR_db_payments_password: ${{ secrets.TF_VAR_DB_PAYMENTS_PASSWORD }}
      TF_VAR_vpc_cidr: ${{ secrets.TF_VAR_VPC_CIDR }}
      TF_VAR_aws_region: ${{ secrets.TF_VAR_AWS_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        working-directory: ./infra
        run: |
          echo 'FMT_OUTPUT<<DELIMITADOR' >> "$GITHUB_ENV"
          echo "$(terraform fmt -check)" >> "$GITHUB_ENV"
          echo 'DELIMITADOR' >> "$GITHUB_ENV"

      - name: Terraform Init
        id: init
        working-directory: ./infra
        run: |
          echo 'INIT_OUTPUT<<DELIMITADOR' >> "$GITHUB_ENV"
          echo "$(terraform init)" >> "$GITHUB_ENV"
          echo 'DELIMITADOR' >> "$GITHUB_ENV"
          
      - name: Terraform Validate
        id: validate
        working-directory: ./infra
        run: |
          echo 'VALIDATE_OUTPUT<<DELIMITADOR' >> "$GITHUB_ENV"
          echo "$(terraform validate -no-color)" >> "$GITHUB_ENV"
          echo 'DELIMITADOR' >> "$GITHUB_ENV"

      - name: Terraform Plan
        id: plan
        working-directory: ./infra
        if: github.event_name == 'pull_request'
        run: |
          echo 'PLAN_OUTPUT<<DELIMITADOR' >> "$GITHUB_ENV"
          echo "$(terraform plan -no-color -input=false)" >> "$GITHUB_ENV"
          echo 'DELIMITADOR' >> "$GITHUB_ENV"

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            <details><summary>Show Format output</summary>

            \`\`\`terraform\n
            ${{ env.FMT_OUTPUT }}
            \`\`\`

            </details>

            <details><summary>Show Init output</summary>

            \`\`\`terraform\n
            ${{ env.INIT_OUTPUT }}
            \`\`\`

            </details>

            <details><summary>Show Validate output</summary>

            \`\`\`terraform\n
            ${{ env.VALIDATE_OUTPUT }}
            \`\`\`

            </details>

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${{ env.PLAN_OUTPUT }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./infra
        run: terraform apply -auto-approve -input=false